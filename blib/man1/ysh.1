.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "YSH 1"
.TH YSH 1 "2008-11-29" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ysh \- The YAML Test Shell
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& ysh [options]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This program is designed to let you play with \s-1YAML\s0 modules in
an interactive way. When you to type in Perl, you get back \s-1YAML\s0. And
vice versa.
.PP
By default, every line you type is a one line Perl program, the return
value of which will be displayed as \s-1YAML\s0.
.PP
To enter multi-line Perl code start the first line with ';' and use as
many lines as needed. Terminate with a line containing just ';'.
.PP
To enter \s-1YAML\s0 text, start with a valid \s-1YAML\s0 separator/header line
which is typically '\-\-\-'. Use '===' to indicate that there is no \s-1YAML\s0
header. Enter as many lines as needed. Terminate with a line
containing just '...'.
.PP
To read in and process an external \s-1YAML\s0 file, enter '< filename'. The
ysh will also work as a standalone filter. It will read anything on
\&\s-1STDIN\s0 as a \s-1YAML\s0 stream and write the Perl output to \s-1STDOUT\s0. You can say
(on most Unix systems):
.PP
.Vb 1
\&    cat yaml.file | ysh | less
.Ve
.SH "COMMAND LINE OPTIONS"
.IX Header "COMMAND LINE OPTIONS"
.IP "\-MYAML::Module" 4
.IX Item "-MYAML::Module"
Set the \s-1YAML\s0 implementation module you wish.
.IP "\-l" 4
.IX Item "-l"
Keep a log of all ysh activity in './ysh.log'. If the log file already
exists, new content will be concatenated to it.
.IP "\-L" 4
.IX Item "-L"
Keep a log of all ysh activity in './ysh.log'. If the log file already
exists, it will be deleted first.
.IP "\-r" 4
.IX Item "-r"
Test roundtripping. Every piece of Perl code entered will be Dumped,
Loaded, and Dumped again. If the two stores do not match, an error
message will be reported.
.IP "\-R" 4
.IX Item "-R"
Same as above, except that a \fBconfirmation\fR message will be printed
when the roundtrip succeeds.
.IP "\-i<number>" 4
.IX Item "-i<number>"
Specify the number of characters to indent each level. This is the same
as setting \f(CW$YAML::Indent\fR.
.IP "\-ub" 4
.IX Item "-ub"
Shortcut for setting '$YAML::UseBlock = 1'. Force multiline scalars to
use 'block' style.
.IP "\-uf" 4
.IX Item "-uf"
Shortcut for setting '$YAML::UseFold = 1'. Force multiline scalars to
use 'folded' style.
.IP "\-uc" 4
.IX Item "-uc"
Shortcut for setting '$YAML::UseCode = 1'. Allows subroutine references
to be processed.
.IP "\-nh" 4
.IX Item "-nh"
Shortcut for setting '$YAML::UseHeader = 0'.
.IP "\-nv" 4
.IX Item "-nv"
Shortcut for setting '$YAML::UseVersion = 0'.
.IP "\-v" 4
.IX Item "-v"
Print the version of ysh.
.IP "\-V" 4
.IX Item "-V"
In addition to the \-v info, print the versions of \s-1YAML\s0 related modules.
.IP "\-h" 4
.IX Item "-h"
Print a help message.
.Sh "\s-1YSH_OPT\s0"
.IX Subsection "YSH_OPT"
If you don't want to enter your favorite options every time you enter
ysh, you can put the options into the \f(CW\*(C`YSH_OPT\*(C'\fR environment variable.
Do something like this:
.PP
.Vb 1
\&    export YSH_OPT=\*(Aq\-i3 \-uc \-L\*(Aq
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1YAML\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Ingy do\*:t Net <ingy@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2006, 2008. Ingy do\*:t Net.
.PP
Copyright (c) 2001, 2002. Brian Ingerson.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
